{
	"author": "USTX Team",
	"details": "This contract implements the functionality of the USTX token.",
	"methods": {
		"allowance(address,address)": {
			"details": "See {IERC20-allowance}."
		},
		"approve(address,uint256)": {
			"details": "Public function to approve spending (when not paused)",
			"params": {
				"spender": "authorized spender account",
				"value": "permitted allowance"
			}
		},
		"balanceOf(address)": {
			"details": "See {IERC20-balanceOf}."
		},
		"burn(uint256)": {
			"details": "Public function to burn tokens (from caller's account)",
			"params": {
				"amount": "number of tokens to burn \t"
			}
		},
		"burnFrom(address,uint256)": {
			"details": "Public function to burn tokens (from third party's account with approval)",
			"params": {
				"account": "target account",
				"amount": "number of tokens to burn"
			}
		},
		"constructor": {
			"details": "Constructor \t*"
		},
		"decimals()": {
			"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
		},
		"decreaseAllowance(address,uint256)": {
			"details": "Public function to reduce spending allowance (when not paused)",
			"params": {
				"spender": "authorized spender account",
				"subtractedValue": "allowance reduction"
			}
		},
		"getFee()": {
			"details": "Public function to get current fee level",
			"return": "fee in basis points \t"
		},
		"increaseAllowance(address,uint256)": {
			"details": "Public function to increase spending allowance (when not paused)",
			"params": {
				"addedValue": "allowance increase",
				"spender": "authorized spender account"
			}
		},
		"mint(address,uint256)": {
			"details": "Public function to mint new tokens (only admin)",
			"params": {
				"account": "destination account address",
				"amount": "new tokens to mint"
			},
			"return": "true"
		},
		"name()": {
			"details": "Returns the name of the token."
		},
		"pause()": {
			"details": "Called by a pauser to pause, triggers stopped state."
		},
		"paused()": {
			"details": "Returns true if the contract is paused, and false otherwise."
		},
		"setFee(uint256)": {
			"details": "Public function to set fee percentage (only admin)",
			"params": {
				"newBasisPoints": "fee percentage in basis points \t"
			}
		},
		"setFeeAddress(address)": {
			"details": "Public function to set fee destination address (only admin)",
			"params": {
				"feeAddr": "fee destination account address \t"
			}
		},
		"symbol()": {
			"details": "Returns the symbol of the token, usually a shorter version of the name."
		},
		"totalSupply()": {
			"details": "See {IERC20-totalSupply}."
		},
		"transfer(address,uint256)": {
			"details": "Public function to transfer token (when not paused)",
			"params": {
				"to": "destination address",
				"value": "transaction value"
			},
			"return": "true"
		},
		"transferFrom(address,address,uint256)": {
			"details": "Public function to transfer token from a third party (when not paused)",
			"params": {
				"from": "source address",
				"to": "destination address",
				"value": "transaction value"
			},
			"return": "true"
		},
		"unpause()": {
			"details": "Called by a pauser to unpause, returns to normal state."
		}
	},
	"title": "Up Stable Token eXperiment TRC20 token"
}
